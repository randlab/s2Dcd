{
    "pyramids" : {
        "title" : "/* PYRAMIDS */",
        "text": "/* I. PYRAMID GENERAL PARAMETERS: I. PYRAMID GENERAL PARAMETERS:\n      I.1. Number of pyramid level(s) (in addition to original simulation grid, i.e. number of Number of pyramid level(s) (in addition to original simulation grid, i.e. number of\n           reduction operations), integer (npyramidLevel): operations), integer (npyramidLevel):\n              - = 0: no use of pyramids = 0: no use of pyramids\n              - > 0: use pyramids, npyramidLevel should be equal to the max of 'nlevel' entries > 0: use pyramids, npyramidLevel should be equal to the max of 'nlevel' entries\n                     in pyramid parameters for every variable (point II.1 below); pyramid parameters for every variable (point II.1 below);\n                     pyramid levels are indexed from fine to coarse: levels are indexed from fine to coarse:\n                        * index 0            : original simulation grid index 0 : original simulation grid\n                        * index npyramidLevel: coarsest level index npyramidLevel: coarsest level\n      If npyramidLevel > 0: npyramidLevel > 0:\n         I.2. for each level, i.e. for i = 1,..., npyramidLevel: for each level, i.e. for i = 1,..., npyramidLevel:\n                 - kx, ky, kz (3 integer): reduction step along x,y,z-direction for the i-th reduction: kx, ky, kz (3 integer): reduction step along x,y,z-direction for the i-th reduction:\n                      k[x|y|z] = 0: nothing is done, same dimension in output = 0: nothing is done, same dimension in output\n                      k[x|y|z] = 1: same dimension in output (with weighted average over 3 nodes) = 1: same dimension in output (with weighted average over 3 nodes)\n                      k[x|y|z] = 2: classical gaussian pyramid = 2: classical gaussian pyramid\n                      k[x|y|z] > 2: generalized gaussian pyramid > 2: generalized gaussian pyramid\n         I.3. pyramid simulation mode, key work (pyramidSimulationMode): pyramid simulation mode, key work (pyramidSimulationMode):\n                 - PYRAMID_SIM_HIERARCHICAL: PYRAMID_SIM_HIERARCHICAL:\n                      (a) spreading conditioning data through the pyramid by simulation at each spreading conditioning data through the pyramid by simulation at each\n                          level, from fine to coarse, conditioned to the level one rank finer from fine to coarse, conditioned to the level one rank finer\n                      (b) simulation at the coarsest level, then simulation of each level, from coarse simulation at the coarsest level, then simulation of each level, from coarse\n                          to fine, conditioned to the level one rank coarser fine, conditioned to the level one rank coarser\n                 - PYRAMID_SIM_HIERARCHICAL_USING_EXPANSION: PYRAMID_SIM_HIERARCHICAL_USING_EXPANSION:\n                      (a) spreading conditioning data through the pyramid by simulation at each spreading conditioning data through the pyramid by simulation at each\n                          level, from fine to coarse, conditioned to the level one rank finer from fine to coarse, conditioned to the level one rank finer\n                      (b) simulation at the coarsest level, then simulation of each level, from coarse simulation at the coarsest level, then simulation of each level, from coarse\n                          to fine, conditioned to the gaussian expansion of the level one rank coarser fine, conditioned to the gaussian expansion of the level one rank coarser\n                 - PYRAMID_SIM_ALL_LEVEL_ONE_BY_ONE: PYRAMID_SIM_ALL_LEVEL_ONE_BY_ONE:\n                      co-simulation of all levels, simulation done at one level at a time of all levels, simulation done at one level at a time\n         I.4. Factors to adpat the maximal number of neighboring nodes: Factors to adpat the maximal number of neighboring nodes:\n              I.4.1. Setting mode, key word (factorNneighboringNodeSettingMode): Setting mode, key word (factorNneighboringNodeSettingMode):\n                        - PYRAMID_ADAPTING_FACTOR_DEFAULT: set by default PYRAMID_ADAPTING_FACTOR_DEFAULT: set by default\n                        - PYRAMID_ADAPTING_FACTOR_MANUAL : read in input PYRAMID_ADAPTING_FACTOR_MANUAL : read in input\n              If factorNneighboringNodeSettingMode == PYRAMID_ADAPTING_FACTOR_MANUAL: factorNneighboringNodeSettingMode == PYRAMID_ADAPTING_FACTOR_MANUAL:\n                 I.4.2. The factors, depending on pyramid simulation mode: The factors, depending on pyramid simulation mode:\n                    - if pyramidSimulationMode == PYRAMID_SIM_HIERARCHICAL if pyramidSimulationMode == PYRAMID_SIM_HIERARCHICAL\n                      or PYRAMID_SIM_HIERARCHICAL_USING_EXPANSION: PYRAMID_SIM_HIERARCHICAL_USING_EXPANSION:\n                         - faCond[0], faSim[0], fbCond[0], fbSim[0], faCond[0], faSim[0], fbCond[0], fbSim[0],\n                           ...,\n                           faCond[n-1], faSim[n-1], fbCond[n-1], fbSim[n-1], faSim[n-1], fbCond[n-1], fbSim[n-1],\n                           fbSim[n]:\n                              I.e. (4*n+1) positive numbers where n = npyramidLevel, with the following (4*n+1) positive numbers where n = npyramidLevel, with the following\n                              meaning. The maximal number of neighboring nodes (according to each variable) The maximal number of neighboring nodes (according to each variable)\n                              is multiplied by multiplied by\n                                (a) faCond[j] and faSim[j] for the conditioning level (level j) faCond[j] and faSim[j] for the conditioning level (level j)\n                                    and the simulated level (level j+1) resp. during step (a) above the simulated level (level j+1) resp. during step (a) above\n                                (b) fbCond[j] and fbSim[j] for the conditioning level (level j+1) (expanded fbCond[j] and fbSim[j] for the conditioning level (level j+1) (expanded\n                                    if pyramidSimulationMode == PYRAMID_SIM_HIERARCHICAL_USING_EXPANSION) pyramidSimulationMode == PYRAMID_SIM_HIERARCHICAL_USING_EXPANSION)\n                                    and the simulated level (level j) resp. during step (b) above the simulated level (level j) resp. during step (b) above\n                    - if pyramidSimulationMode == PYRAMID_SIM_ALL_LEVEL_ONE_BY_ONE: if pyramidSimulationMode == PYRAMID_SIM_ALL_LEVEL_ONE_BY_ONE:\n                         - f[0],...,f[npyramidLevel-1],f[npyramidLevel]: f[0],...,f[npyramidLevel-1],f[npyramidLevel]:\n                              I.e. (npyramidLevel + 1) positive numbers, with the following meaning. The (npyramidLevel + 1) positive numbers, with the following meaning. The\n                              maximal number of neighboring nodes (according to each variable) is number of neighboring nodes (according to each variable) is\n                              multiplied by f[j] for the j-th pyramid level. by f[j] for the j-th pyramid level.\n         I.5. Factors to adpat the distance threshold (similar to I.4): Factors to adpat the distance threshold (similar to I.4):\n              I.5.1. Setting mode, key word (factorDistanceThresholdSettingMode): Setting mode, key word (factorDistanceThresholdSettingMode):\n                        - PYRAMID_ADAPTING_FACTOR_DEFAULT: set by default PYRAMID_ADAPTING_FACTOR_DEFAULT: set by default\n                        - PYRAMID_ADAPTING_FACTOR_MANUAL : read in input PYRAMID_ADAPTING_FACTOR_MANUAL : read in input\n              If factorDistanceThresholdSettingMode == PYRAMID_ADAPTING_FACTOR_MANUAL: factorDistanceThresholdSettingMode == PYRAMID_ADAPTING_FACTOR_MANUAL:\n                 I.5.2. The factors, depending on pyramid simulation mode (similar to I.4.2). The factors, depending on pyramid simulation mode (similar to I.4.2).\n         II. PYRAMID PARAMETERS FOR EACH VARIABLE: PYRAMID PARAMETERS FOR EACH VARIABLE:\n         II.1. nlevel: number of pyramid level(s) (number of reduction operations) nlevel: number of pyramid level(s) (number of reduction operations)\n                          - = 0: no use of pyramid for the considered variable = 0: no use of pyramid for the considered variable\n                          - > 0: use pyramids for the considered variable, with nlevel level > 0: use pyramids for the considered variable, with nlevel level\n         If nlevel > 0: nlevel > 0:\n            II.2. Pyramid type, key word (pyramidType): Pyramid type, key word (pyramidType):\n                     - PYRAMID_CONTINUOUS        : pyramid applied to continuous variable (direct) PYRAMID_CONTINUOUS : pyramid applied to continuous variable (direct)\n                     - PYRAMID_CATEGORICAL_AUTO  : pyramid for categorical variable PYRAMID_CATEGORICAL_AUTO : pyramid for categorical variable\n                                                      - pyramid for indicator variable of each category pyramid for indicator variable of each category\n                                                        except one (one pyramid per indicator variable) one (one pyramid per indicator variable)\n                     - PYRAMID_CATEGORICAL_CUSTOM: pyramid for categorical variable PYRAMID_CATEGORICAL_CUSTOM: pyramid for categorical variable\n                                                      - pyramid for indicator variable of each class pyramid for indicator variable of each class\n                                                        of values given explicitly (one pyramid per values given explicitly (one pyramid per\n                                                        indicator variable) variable)\n            If pyramidType == PYRAMID_CATEGORICAL_CUSTOM: pyramidType == PYRAMID_CATEGORICAL_CUSTOM:\n               II.3.  The classes of values (for which the indicator variables are The classes of values (for which the indicator variables are\n                  considered for pyramids) have to be defined; a class of values is given by a union for pyramids) have to be defined; a class of values is given by a union\n                  of interval(s): [inf_1,sup_1[ U ... U [inf_n,sup_n[. interval(s): [inf_1,sup_1[ U ... U [inf_n,sup_n[.\n                  Here are given: are given:\n                     - nclass: number of classes of values nclass: number of classes of values\n                     - for i in 1,..., nclass: definition of the i-th class of values: for i in 1,..., nclass: definition of the i-th class of values:\n                          - ninterval: number of interval(s) ninterval: number of interval(s)\n                          - inf_1 sup_1 ... inf_ninterval sup_ninterval: inf and sup for each interval inf_1 sup_1 ... inf_ninterval sup_ninterval: inf and sup for each interval\n                               these values should satisfy inf_i < sup_i values should satisfy inf_i < sup_i\n                  Then, for each class, the number of pyramid levels (number of reduction operations) is for each class, the number of pyramid levels (number of reduction operations) is\n                     - nlevel_i (for i in 1,..., nclass) nlevel_i (for i in 1,..., nclass)\n*/\n"
    }
}


