/* SIMULATION GRID (SG) */
30    31    32    // size in each direction
1.0    1.0    1.0    // spacing in each direction
  0.0    0.0   0.0  // origin

/* SIMULATION VARIABLES */
/* Number of simulation variable(s), and for each variable:
      variable name, output flag (0 / 1), and if output flag is 1: format string (as passed to fprintf).
   Write DEFAULT_FORMAT for format string to use default format.
   Example (with 3 variables):
      3
      varName1  1  %10.5E
      varName2  0
      varName3  1  DEFAULT_FORMAT
*/
1
facies      1   DEFAULT_FORMAT

/* OUTPUT SETTINGS FOR SIMULATION */
/* Key word and required name(s) or prefix, for output of the realizations:
      - OUTPUT_SIM_NO_FILE:
           no file in output,
      - OUTPUT_SIM_ALL_IN_ONE_FILE:
           one file in output,
           requires one file name
      - OUTPUT_SIM_ONE_FILE_PER_VARIABLE:
           one file per variable in output (flagged as 1 above),
           requires as many file name(s) as variable(s) flagged as 1 above
      - OUTPUT_SIM_ONE_FILE_PER_REALIZATION:
           one file per realization,
           requires one prefix (for file name) */
OUTPUT_SIM_ALL_IN_ONE_FILE 
test_simul.gslib

/* OUTPUT REPORT */
/* Flag (0 / 1), and if 1, output report file. */
1
test_report.txt

/* TRAINING IMAGE */
/* Number of training image(s) (nTI >= 1), followed by nTI file(s)
   (a file can be replaced by the string "_DATA_" which means that the
   simulation grid itself is taken as training image), and
   if nTI > 1, one pdf image file (for training images, nTI variables). */
1
ti.gslib

/* DATA IMAGE FILE FOR SG */
/* Number of image file(s) (n >= 0), followed by n file(s). */
0

/* DATA POINT SET FILE FOR SG */
/* Number of point set file(s) (n >= 0), followed by n file(s). */
0

/* MASK IMAGE */
/* Flag (0: mask not used / 1: mask used) and if 1, mask image file
   (this image contains one variable on the simulation grid: flag (0 / 1)
   for each node of the simulation grid that indicates if the variable(s)
   will be simulated at the corresponding node (flag 1) or not (flag 0). */
0

/* HOMOTHETY */
/* 1. Homothety usage, integer (homothetyUsage):
        - 0: no homothety
        - 1: homothety without tolerance
        - 2: homothety with tolerance
   2a. If homothetyUsage == 1,
          then for homothety ratio in each direction,
          first for x, then for y, and then for z-axis direction:
             - Flag (0 / 1) indicating if given in an image file,
               followed by
                  - one value (real) if flag is 0
                  - name of the image file (one variable) if flag is 1
   2b. If homothetyUsage == 2,
          then for homothety ratio in each direction,
          first for x, then for y, and then for z-axis direction:
             - Flag (0 / 1) indicating if given in an image file,
               followed by
                  - two values (lower and upper bounds) (real) if flag is 0
                  - name of the image file (two variables) if flag is 1
*/
0

/* ROTATION */
/* 1. Rotation usage, integer (rotationUsage):
        - 0: no rotation
        - 1: rotation without tolerance
        - 2: rotation with tolerance
   2a. If rotationUsage == 1,
          then for each angle,
          first for azimuth, then for dip, and then for plunge:
             - Flag (0 / 1) indicating if given in an image file,
               followed by
                  - one value (real) if flag is 0
                  - name of the image file (one variable) if flag is 1
   2b. If rotationUsage == 2,
          then for each angle,
          first for azimuth, then for dip, and then for plunge:
             - Flag (0 / 1) indicating if given in an image file,
               followed by
                  - two values (lower and upper bounds) (real) if flag is 0
                  - name of the image file (two variables) if flag is 1
*/
0

/* CONSISTENCY OF CONDITIONING DATA (TOLERANCE RELATIVELY TO THE RANGE OF TRAINING VALUES) */
/* Maximal accepted expansion in both extremities of the range of values in training images
   for covering the conditioning data values; e.g. if this number is set to 0.05,
   the conditioning data values can be beyond the range of the values in the training images
   (in both extremities) of at most 5%; this separately applies to all variables for which
   the distance is absolute (not relative, see "relative distance flag" below) and the
   distance type is not 0 (see "distance type" below). */
0.05

/* NORMALIZATION TYPE (FOR VARIABLES FOR WHICH DISTANCE TYPE IS NOT 0 AND DISTANCE IS ABSOLUTE) */
/* Available types:
      - NORMALIZING_LINEAR
      - NORMALIZING_UNIFORM
      - NORMALIZING_NORMAL */
NORMALIZING_LINEAR

/* SEARCH NEIGHBORHOOD PARAMETERS */
/* A search neighborhood is a 3D ellipsoid, defined by:
      - search radii (in number of nodes), for each direction
        (-1.0 for a default value automatically computed)
      - anisotropy ratios, for each direction, i.e. numbers of nodes corresponding
        to a distance of one, in each direction; for example (1.0, 1.0, 2.0) means
        that the distance to the central node is the Euclidean distance where
        the unit (distance=1) corresponds to 1, 1 and 2 nodes for the 1st, 2nd and
        3rd direction respectively.
      - angles (azimuth, dip and plunge) defining the rotation that sends the coordinates
        system xyz onto the coordinates system x'y'z' in which the search radii
        and the anisotropy ratios are given
      - power at which the distance is elevated for computing the weight of each
        node in the search neighborhood
   Note that
      - the search neighborhood is delimited by the search radii and the angles
      - the anisotropy ratios are used only for computing the distance to the central
        node, from each node in the search neighborhood
      - the nodes inside the search neighborhood are sorted according to their
        distance to the central node, from the closest one to the furthest one */
/* SEARCH NEIGHBORHOOD PARAMETERS FOR VARIABLE #0 */
 -1.0   -1.0   -1.0   // search radius in each direction
  1.0    1.0    1.0   // anisotropy ratio in each direction
  0.0    0.0    0.0   // angles (azimuth, dip, plunge in degrees) for rotation
  0.0                 // power for computing weight according to distance

/* MAXIMAL NUMBER OF NEIGHBORING NODES FOR EACH VARIABLE (as many number(s) as number of variable(s)) */
20

/* MAXIMAL DENSITY OF NEIGHBORING NODES IN SEARCH NEIGHBORHOOD FOR EACH VARIABLE (as many number(s)
   as number of variable(s)) */
1.0

/* RELATIVE DISTANCE FLAG FOR EACH VARIABLE (as many flag(s) (0 / 1) as number of variable(s)) */
0

/* DISTANCE TYPE FOR EACH VARIABLE (as many number(s) as number of variable(s)) */
/* Available distance (between data events):
      - 0: non-matching nodes (typically for categorical variable)
      - 1: L-1 distance
      - 2: L-2 distance
      - 3: L-p distance, requires the real positive parameter p
      - 4: L-infinity distance */
0

/* WEIGHT FACTOR FOR CONDITIONING DATA, FOR EACH VARIABLE (as many number(s) as number of variable(s)) */
/* For the computation of distance between data events, if a value is a conditioning
   data, its corresponding contribution is multiplied by the factor given here. */
1.0

/* SIMULATION AND PATH PARAMETERS */
/* Key word for simulation type:
      - SIM_ONE_BY_ONE:
           successive simulation of one variable at one node in the simulation grid (4D path)
      - SIM_VARIABLE_VECTOR:
           successive simulation of all variable(s) at one node in the simulation grid (3D path) */
SIM_ONE_BY_ONE

/* Key word for path type:
      - PATH_RANDOM:
           random path, for simulation type:
              - SIM_ONE_BY_ONE     : path visiting all nodes and variables in a random order
              - SIM_VARIABLE_VECTOR: path visiting all nodes in a random order
      - PATH_UNILATERAL:
           unilateral path, for simulation type:
              - SIM_ONE_BY_ONE: requires a vector of size 4.
                   Example: u = (0, -2, 1, 0) means that the path will visit all nodes:
                   randomly in xv-sections, with increasing z-coordinate, and then decreasing y-coordinate.
              - SIM_VARIABLE_VECTOR: requires a vector of size 3.
                   Example: u = (-1, 0, 2) means that the path will visit all nodes:
                   randomly in y-sections, with decreasing x-coordinate, and then increasing z-coordinate.
           This vector must be given after the key word PATH_UNILATERAL. */
PATH_RANDOM

/* DISTANCE THRESHOLD FOR EACH VARIABLE (as many number(s) as number of variable(s)) */
0.01

/* PROBABILITY CONSTRAINTS */
/* FOR EACH VARIABLE:
   1. Probability constraint usage, integer (probabilityConstraintUsage):
        - 0: no probability constraint
        - 1: global probability constraint
        - 2: local probability constraint

   2. If probabilityConstraintUsage > 0, then the classes of values (for which the
         probability constraints will be given) have to be defined; a class of values
         is given by a union of interval(s): [inf_1,sup_1[ U ... U [inf_n,sup_n[;
         Here are given:
            - nclass: number of classes of values
            - for i in 1,..., nclass: definition of the i-th class of values:
                 - ninterval: number of interval(s)
                 - inf_1 sup_1 ... inf_ninterval sup_ninterval: inf and sup for each interval
                      these values should satisfy inf_i < sup_i

   3a. If probabilityConstraintUsage == 1, then
          - global probability for each class (defined in 2. above), i.e.
            nclass numbers in [0,1] of sum 1
   3b. If probabilityConstraintUsage == 2, then
          - one pdf image file (for every class, nclass variables)
            (image of same dimensions as the simulation grid)
          - support radius for probability maps (i.e. distance according to
            the unit defined in the search neighborhood parameters for the
            considered variable)
          - method for computing the current pdf (in the simulation grid),
             integer (localCurrentPdfComputation):
               - 0: "COMPLETE" mode: all the informed node in the search neighborhood
                    for the considered variable, and within the support are taken into account
               - 1: "APPROXIMATE" mode: only the neighboring nodes (used for the
                    search in the TI) within the support are taken into account

   4. If probabilityConstraintUsage > 0, then
         method for comparing pdf's, integer (comparingPdfMethod):
            - 0: MAE (Mean Absolute Error)
            - 1: RMSE (Root Mean Squared Error)
            - 2: KLD (Kullback Leibler Divergence)
            - 3: JSD (JSD (Jensen-Shannon Divergence)
            - 4: MLikRsym (Mean Likelihood Ratio (over each class indicator, symmetric target interval))
            - 5: MLikRopt (Mean Likelihood Ratio (over each class indicator, optimal target interval))

   5. If probabilityConstraintUsage > 0, then
         - deactivation distance, i.e. one positive number
           (the probability constraint is deactivated if the distance between
           the current simulated node and the last node in its neighbors (used
           for the search in the TI) (distance computed according to the corresponding
           search neighborhood parameters) is below the given deactivation distance)

   6. If probabilityConstraintUsage > 0, then
         - threshold type for pdf's comparison, integer (probabilityConstraintThresholdType)
              - 0: constant threshold
              - 1: dynamic threshold
           note: if comparingPdfMethod is set to 4 or 5, probabilityConstraintThresholdType must be set to 0
         6.1a If probabilityConstraintThresholdType == 0, then
                 - threshold value
         6.1b If probabilityConstraintThresholdType == 1, then the 7 parameters:
                 - M1 M2 M3
                 - T1 T2 T3
                 - W
              These parameters should satisfy:
                 0 <= M1 <= M2 < M3,
                 T1 >= T2 >= T3,
                 w != 0.
              The threshold value t is defined as a function of the number M
              of nodes used for computing the current pdf (in the simulation grid)
              including the candidate (i.e. current simulated) node by:
                 t(M) = T1, if M < M1
                 t(M) = T2, if M1 <= M < M2
                 t(M) = (T3 - T2) / (M3^W - M2^W) * (M^W - M2^W) + T2, if M2 <= M < M3
                 t(M) = T3, if M3 <= M
*/
/* PROBABILITY CONSTRAINTS FOR VARIABLE #0 */
0

/* BLOCK DATA */
/* FOR EACH VARIABLE:
   1. Block data usage, integer (blockDataUsage):
         - 0: no block data
         - 1: use of block data (mean value)

   2. If blockDataUsage == 1, then
         - block data file name
*/
/* BLOCK DATA FOR VARIABLE #0 */
0

/* MAXIMAL SCAN FRACTION FOR EACH TI (as many number(s) as number of training image(s)) */
0.3

/* TOLERANCE */
/* Tolerance t on the threshold value for flagging nodes:
   let d(i) be the distance between the data event in the simulation grid and in the training
   image for the i-th variable and s(i) be the distance threshold for the i-th variable, and let
   e(i) = max(0, (d(i)-s(i))/s(i)) be the relative error for the i-th variable, i.e. the relative
   part of the distance d(i) beyond the threshold s(i); during the scan of the training image, a node
   that minimizes e = sum (e(i)) is retained (the scan is stopped if e = 0); if e is greater than the
   tolerance t (given here), then the current simulated node and all non-conditioning nodes of the
   data events (one per variable) in the simulation grid are flagged for resimulation (post-processing).
   Note that if probability constraints is used, a similar error as e(i) is computed from the comparison
   of the pdf's, and will contributed in the sum defining the error e. */
0.0

/* POST-PROCESSING */
/* 1. Maximal number of path(s) (npostProcessingPathMax)
   2. If npostProcessingPathMax > 0:
      key word for post-processing parameters (i. e. number of neighboring nodes, distance threshold,
      maximal scan fraction, and tolerance):
         - POST_PROCESSING_PARAMETERS_DEFAULT: for default parameters
         - POST_PROCESSING_PARAMETERS_SAME   : for same parameters as given above
         - POST_PROCESSING_PARAMETERS_MANUAL : for manual settings
   3. If npostProcessingPathMax > 0 and POST_PROCESSING_PARAMETERS_MANUAL:
         MAXIMAL NUMBER OF NEIGHBORING NODES FOR EACH VARIABLE (as many number(s) as number of variable(s))
         MAXIMAL DENSITY OF NEIGHBORING NODES IN SEARCH NEIGHBORHOOD FOR EACH VARIABLE (as many number(s)
            as number of variable(s))
         DISTANCE THRESHOLD FOR EACH VARIABLE (as many number(s) as number of variable(s))
         MAXIMAL SCAN FRACTION FOR EACH TI (as many number(s) as number of training image(s))
         TOLERANCE
*/
1
POST_PROCESSING_PARAMETERS_DEFAULT

/* PYRAMIDS */
/* I. PYRAMID GENERAL PARAMETERS:
      I.1. Number of pyramid level(s) (in addition to original simulation grid, i.e. number of
           reduction operations), integer (npyramidLevel):
              - = 0: no use of pyramids
              - > 0: use pyramids, npyramidLevel should be equal to the max of "nlevel" entries
                     in pyramid parameters for every variable (point II.1 below);
                     pyramid levels are indexed from fine to coarse:
                        * index 0            : original simulation grid
                        * index npyramidLevel: coarsest level
      If npyramidLevel > 0:
         I.2. for each level, i.e. for i = 1,..., npyramidLevel:
                 - kx, ky, kz (3 integer): reduction step along x,y,z-direction for the i-th reduction:
                      k[x|y|z] = 0: nothing is done, same dimension in output
                      k[x|y|z] = 1: same dimension in output (with weighted average over 3 nodes)
                      k[x|y|z] = 2: classical gaussian pyramid
                      k[x|y|z] > 2: generalized gaussian pyramid
         I.3. pyramid simulation mode, key work (pyramidSimulationMode):
                 - PYRAMID_SIM_HIERARCHICAL:
                      (a) spreading conditioning data through the pyramid by simulation at each
                          level, from fine to coarse, conditioned to the level one rank finer
                      (b) simulation at the coarsest level, then simulation of each level, from coarse
                          to fine, conditioned to the level one rank coarser
                 - PYRAMID_SIM_HIERARCHICAL_USING_EXPANSION:
                      (a) spreading conditioning data through the pyramid by simulation at each
                          level, from fine to coarse, conditioned to the level one rank finer
                      (b) simulation at the coarsest level, then simulation of each level, from coarse
                          to fine, conditioned to the gaussian expansion of the level one rank coarser
                 - PYRAMID_SIM_ALL_LEVEL_ONE_BY_ONE:
                      co-simulation of all levels, simulation done at one level at a time
         I.4. Factors to adpat the maximal number of neighboring nodes:
              I.4.1. Setting mode, key word (factorNneighboringNodeSettingMode):
                        - PYRAMID_ADAPTING_FACTOR_DEFAULT: set by default
                        - PYRAMID_ADAPTING_FACTOR_MANUAL : read in input
              If factorNneighboringNodeSettingMode == PYRAMID_ADAPTING_FACTOR_MANUAL:
                 I.4.2. The factors, depending on pyramid simulation mode:
                    - if pyramidSimulationMode == PYRAMID_SIM_HIERARCHICAL
                      or PYRAMID_SIM_HIERARCHICAL_USING_EXPANSION:
                         - faCond[0], faSim[0], fbCond[0], fbSim[0],
                           ...,
                           faCond[n-1], faSim[n-1], fbCond[n-1], fbSim[n-1],
                           fbSim[n]:
                              I.e. (4*n+1) positive numbers where n = npyramidLevel, with the following
                              meaning. The maximal number of neighboring nodes (according to each variable)
                              is multiplied by
                                (a) faCond[j] and faSim[j] for the conditioning level (level j)
                                    and the simulated level (level j+1) resp. during step (a) above
                                (b) fbCond[j] and fbSim[j] for the conditioning level (level j+1) (expanded
                                    if pyramidSimulationMode == PYRAMID_SIM_HIERARCHICAL_USING_EXPANSION)
                                    and the simulated level (level j) resp. during step (b) above
                    - if pyramidSimulationMode == PYRAMID_SIM_ALL_LEVEL_ONE_BY_ONE:
                         - f[0],...,f[npyramidLevel-1],f[npyramidLevel]:
                              I.e. (npyramidLevel + 1) positive numbers, with the following meaning. The
                              maximal number of neighboring nodes (according to each variable) is
                              multiplied by f[j] for the j-th pyramid level.
         I.5. Factors to adpat the distance threshold (similar to I.4):
              I.5.1. Setting mode, key word (factorDistanceThresholdSettingMode):
                        - PYRAMID_ADAPTING_FACTOR_DEFAULT: set by default
                        - PYRAMID_ADAPTING_FACTOR_MANUAL : read in input
              If factorDistanceThresholdSettingMode == PYRAMID_ADAPTING_FACTOR_MANUAL:
                 I.5.2. The factors, depending on pyramid simulation mode (similar to I.4.2).

         II. PYRAMID PARAMETERS FOR EACH VARIABLE:

         II.1. nlevel: number of pyramid level(s) (number of reduction operations)
                          - = 0: no use of pyramid for the considered variable
                          - > 0: use pyramids for the considered variable, with nlevel level

         If nlevel > 0:
            II.2. Pyramid type, key word (pyramidType):
                     - PYRAMID_CONTINUOUS        : pyramid applied to continuous variable (direct)
                     - PYRAMID_CATEGORICAL_AUTO  : pyramid for categorical variable
                                                      - pyramid for indicator variable of each category
                                                        except one (one pyramid per indicator variable)
                     - PYRAMID_CATEGORICAL_CUSTOM: pyramid for categorical variable
                                                      - pyramid for indicator variable of each class
                                                        of values given explicitly (one pyramid per
                                                        indicator variable)

            If pyramidType == PYRAMID_CATEGORICAL_CUSTOM:
               II.3.  The classes of values (for which the indicator variables are
                  considered for pyramids) have to be defined; a class of values is given by a union
                  of interval(s): [inf_1,sup_1[ U ... U [inf_n,sup_n[.
                  Here are given:
                     - nclass: number of classes of values
                     - for i in 1,..., nclass: definition of the i-th class of values:
                          - ninterval: number of interval(s)
                          - inf_1 sup_1 ... inf_ninterval sup_ninterval: inf and sup for each interval
                               these values should satisfy inf_i < sup_i
                  Then, for each class, the number of pyramid levels (number of reduction operations) is
                     - nlevel_i (for i in 1,..., nclass)
*/
/* PYRAMID GENERAL PARAMETERS */
0

/* SEED NUMBER AND SEED INCREMENT */
444
1

/* NUMBER OF REALIZATIONS */
1

END
